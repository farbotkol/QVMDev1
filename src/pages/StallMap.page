<apex:page controller="StallMapController" sidebar="false" showHeader="false">
    <head>
        <title>QVM Map</title>
        <style>
            .floorplan,
            .room {border: 1px solid #ee7538;}
            
            .floorplan {background: #ebecec;height: 5500px;position: relative;width: 5000px;}
            
            .room { position: absolute;background: #fff;color: #000;display: block;font-family: Arial;text-align: center;font-size: 11px;}
            
            .room:hover {background: #ee7538;color: #fff;}
          .dropzone-wrapper {
               
                bottom: 0;
                left: 0;
                right: 0;
            }
            
            .dropzone {
                overflow: hidden;
                margin: .5em;
                padding: 1em;
                color: #666;
                text-align: center;
                background: #ccc;
                line-height: 4em;
                border: 4px dashed transparent;
                transition: background .15s linear, border-color .15s linear;
            }
            
            .dropzone.-drop-possible { border-color: #666; }
            
            .dropzone.-drop-over {
                background: #666;
                color: #fff;
            }
            
            .draggable {
                
                z-index: 10;
                text-align: center;
                -ms-touch-action: none;
                    touch-action: none;
            }
            
            .draggable.-drop-possible { background-color: #42bd41; }
			.resize-drag {box-sizing: border-box;}
        </style>
        <script src="//cdn.jsdelivr.net/interact.js/1.2.6/interact.min.js"></script>
       	 <script>
        (function (interact) {
    
        'use strict';
    
        var transformProp;
    
        interact.maxInteractions(Infinity);
    
        // setup draggable elements.
        interact('.js-drag')
            .draggable({ 
                 max: Infinity ,
                 snap: {
                  targets: [
                    interact.createSnapGrid({ x: 30, y: 30 })
                  ],
                  range: Infinity,
                  relativePoints: [ { x: 0, y: 0 } ]
                },
                inertia: true,
                restrict: {
                  restriction: 'parent',
                  elementRect: { top: 0, left: 0, bottom: 1, right: 1 },
                  endOnly: true
                }
             })
         	
            .on('dragstart', function (event) {
                event.interaction.x = parseInt(event.target.getAttribute('data-x'), 10) || 0;
                event.interaction.y = parseInt(event.target.getAttribute('data-y'), 10) || 0;
            })
            .on('dragmove', function (event) {
                event.interaction.x += event.dx;
                event.interaction.y += event.dy;
    
                if (transformProp) {
                    event.target.style[transformProp] =
                        'translate(' + event.interaction.x + 'px, ' + event.interaction.y + 'px)';
                }
                else {
                    event.target.style.left = event.interaction.x + 'px';
                    event.target.style.top  = event.interaction.y + 'px';
                }
            })
            .on('dragend', function (event) {
                event.target.setAttribute('data-x', event.interaction.x);
                event.target.setAttribute('data-y', event.interaction.y);
                CallApexMethod(event.target.id , event.target.style.width, event.target.style.height,event.target.style.left,event.target.style.top) ;
            })
        	.on('drop', function (event){
            
            })
        .resizable({
            preserveAspectRatio: false,
            edges: { left: true, right: true, bottom: true, top: true },
             snap: { targets: [
                      // snap to the point (0, 450)
                      { x: 0, y: 450, range: 50 },
                
                      // snap only the y coord to 100
                      // i.e. move horizontally at y=100
                      { y: 100, range: Infinity }
                    ]}
          })
        .on('resizemove', function (event) {
            var target = event.target,
                x = (parseFloat(target.getAttribute('data-x')) || 0),
                y = (parseFloat(target.getAttribute('data-y')) || 0);
        
            // update the element's style
            target.style.width  = event.rect.width + 'px';
            target.style.height = event.rect.height + 'px';
             target.style.lineHeight = event.rect.height + 'px';
        
            // translate when resizing from top or left edges
                x += event.deltaRect.left;
               y += event.deltaRect.top;
        
            //  target.style.webkitTransform = target.style.transform =
            //    'translate(' + x + 'px,' + y + 'px)';
        
            target.setAttribute('data-x', x);
            target.setAttribute('data-y', y);
           
          })
        .on('resizeend',function (event) {
                CallApexMethod(event.target.id , event.target.style.width, event.target.style.height,event.target.style.left,event.target.style.top) ;
            })
        ;
            
    	
        // setup drop areas.
        // dropzone #1 accepts draggable #1
            //  setupDropzone('#drop1', '#drag1');
        // dropzone #2 accepts draggable #1 and #2
            //  setupDropzone('#drop2', '#drag1, #drag2');
        // every dropzone accepts draggable #3
        setupDropzone('#dropzone', '.js-drag');
    
        /**
         * Setup a given element as a dropzone.
         *
         * @param {HTMLElement|String} el
         * @param {String} accept
         */
        function setupDropzone(el, accept) {
            interact(el)
                .dropzone({
                    accept: accept,
                    ondropactivate: function (event) {
                        addClass(event.relatedTarget, '-drop-possible');
                    },
                    ondropdeactivate: function (event) {
                        removeClass(event.relatedTarget, '-drop-possible');
                    }
                })
                .on('dropactivate', function (event) {
                    var active = event.target.getAttribute('active')|0;
    
                    // change style if it was previously not active
                    if (active === 0) {
                        addClass(event.target, '-drop-possible');
                        //   event.target.textContent = 'Drop me here!';
                    }
    
                    event.target.setAttribute('active', active + 1);
                })
                .on('dropdeactivate', function (event) {
                    var active = event.target.getAttribute('active')|0;
    
                    // change style if it was previously active
                    // but will no longer be active
                    if (active === 1) {
                        removeClass(event.target, '-drop-possible');
                        //  event.target.textContent = 'Dropzone';
                    }
    
                    event.target.setAttribute('active', active - 1);
                })
                .on('dragenter', function (event) {
                    addClass(event.target, '-drop-over');
                    // event.relatedTarget.textContent = 'I\'m in';
                })
                .on('dragleave', function (event) {
                    removeClass(event.target, '-drop-over');
                    // event.relatedTarget.textContent = 'Drag meâ€¦';
                })
                .on('drop', function (event) {
                    removeClass(event.target, '-drop-over');
                    // event.relatedTarget.textContent = 'Dropped';
                });
        }
    
        function addClass (element, className) {
            if (element.classList) {
                return element.classList.add(className);
            }
            else {
                element.className += ' ' + className;
            }
        }
    
        function removeClass (element, className) {
            if (element.classList) {
                return element.classList.remove(className);
            }
            else {
                element.className = element.className.replace(new RegExp(className + ' *', 'g'), '');
            }
        }
    
        interact(document).on('ready', function () {
            transformProp = 'transform' in document.body.style
                ? 'transform': 'webkitTransform' in document.body.style
                ? 'webkitTransform': 'mozTransform' in document.body.style
                ? 'mozTransform': 'oTransform' in document.body.style
                ? 'oTransform': 'msTransform' in document.body.style
                ? 'msTransform': null;
        });
    
    }(window.interact));
        
        
        </script>
           	
       
    </head>
    <apex:form >
        <apex:outputtext value="{!buildTable}" escape="false" id="tblHTML"/> 
        <apex:actionFunction name="CallApexMethod" action="{!UpdateAttributes}" onComplete=";">
            <apex:param name="stallid" value=""/>
			<apex:param name="width" value=""/>
            <apex:param name="height" value=""/>
            <apex:param name="left" value=""/>
            <apex:param name="top" value=""/>
        </apex:actionFunction>
    </apex:form>
</apex:page>